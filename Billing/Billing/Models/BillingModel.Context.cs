//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Billing.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class BillingEntities : DbContext
    {
        public BillingEntities()
            : base("name=BillingEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<ColorRate> ColorRates { get; set; }
        public DbSet<Party> Parties { get; set; }
        public DbSet<PaulOffsetBill> PaulOffsetBills { get; set; }
        public DbSet<Bill> Bills { get; set; }
    
        public virtual int Insert_Bill_PaulOffset(string color, Nullable<decimal> ratePerThousand, Nullable<decimal> quantity, Nullable<decimal> plateCharge, Nullable<decimal> gST_rate, Nullable<decimal> totalBillAmount)
        {
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var ratePerThousandParameter = ratePerThousand.HasValue ?
                new ObjectParameter("RatePerThousand", ratePerThousand) :
                new ObjectParameter("RatePerThousand", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(decimal));
    
            var plateChargeParameter = plateCharge.HasValue ?
                new ObjectParameter("PlateCharge", plateCharge) :
                new ObjectParameter("PlateCharge", typeof(decimal));
    
            var gST_rateParameter = gST_rate.HasValue ?
                new ObjectParameter("GST_rate", gST_rate) :
                new ObjectParameter("GST_rate", typeof(decimal));
    
            var totalBillAmountParameter = totalBillAmount.HasValue ?
                new ObjectParameter("TotalBillAmount", totalBillAmount) :
                new ObjectParameter("TotalBillAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insert_Bill_PaulOffset", colorParameter, ratePerThousandParameter, quantityParameter, plateChargeParameter, gST_rateParameter, totalBillAmountParameter);
        }
    
        public virtual int RegisterParty(string name, string companyName, string address, Nullable<decimal> mobileNo, string gSTN_Number, string panNo)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var mobileNoParameter = mobileNo.HasValue ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(decimal));
    
            var gSTN_NumberParameter = gSTN_Number != null ?
                new ObjectParameter("GSTN_Number", gSTN_Number) :
                new ObjectParameter("GSTN_Number", typeof(string));
    
            var panNoParameter = panNo != null ?
                new ObjectParameter("PanNo", panNo) :
                new ObjectParameter("PanNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterParty", nameParameter, companyNameParameter, addressParameter, mobileNoParameter, gSTN_NumberParameter, panNoParameter);
        }
    
        public virtual int InsertBill(string invoice_No, string bill_By, string companyName, string company_GSTNo, Nullable<decimal> totalBillAmount, Nullable<decimal> gST_Paid)
        {
            var invoice_NoParameter = invoice_No != null ?
                new ObjectParameter("Invoice_No", invoice_No) :
                new ObjectParameter("Invoice_No", typeof(string));
    
            var bill_ByParameter = bill_By != null ?
                new ObjectParameter("Bill_By", bill_By) :
                new ObjectParameter("Bill_By", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var company_GSTNoParameter = company_GSTNo != null ?
                new ObjectParameter("Company_GSTNo", company_GSTNo) :
                new ObjectParameter("Company_GSTNo", typeof(string));
    
            var totalBillAmountParameter = totalBillAmount.HasValue ?
                new ObjectParameter("TotalBillAmount", totalBillAmount) :
                new ObjectParameter("TotalBillAmount", typeof(decimal));
    
            var gST_PaidParameter = gST_Paid.HasValue ?
                new ObjectParameter("GST_Paid", gST_Paid) :
                new ObjectParameter("GST_Paid", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBill", invoice_NoParameter, bill_ByParameter, companyNameParameter, company_GSTNoParameter, totalBillAmountParameter, gST_PaidParameter);
        }
    }
}
